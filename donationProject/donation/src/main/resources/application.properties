# application-local.properties
#server.servlet.context-path=/api
#spring location setting
spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp
server.port=8090

# Database
spring.datasource.initialize=true
spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
spring.datasource.hikari.jdbc-url=jdbc:oracle:thin:@192.168.10.95:59161/xe
spring.datasource.hikari.username=jhsong92
spring.datasource.hikari.password=jhsong92
spring.datasource.hikari.pool-name: hikari-cp
spring.datasource.hikari.maximum-pool-size: 30
spring.datasource.hikari.minimum-idle: 2
spring.jpa.open-in-view=false


logging.level.root=debug
logging.level.org.springframework.web=debug
logging.level.org.hibernate=error
#  > @Configuration의 역할
#
#- Spring Framwork가 구동될 때, @Configuration 파일들을 찾아서 설정값을 초기화한다.
#- @Configuration 파일들은 각 파일의 Bean 내용들을 토대로 초기값을 설정해준다.
#- @Bean 들은 싱글턴 패턴으로 spring framework에 등록된다.
#
#  > Hikari CP 등록
#
#- hikariConfig() 메소드는 hikari cp config을 spring framework에 명시해준다. 
#    - spring.datasource.hikari는 application.yml에 명시된 내용이다.
#- dataSource() 메소드는 hikariConfig()의 리턴값을 dataSource로 등록한다.
#    - dataSource를 설정함으로써 myBatis가 hikari dbcp(DataBaseConnectionPool)을 활용할 수 있도록 연결해주는 것이다.
#
#  > Hikari CP 정보가 담긴 dataSource 등록
#
#- sqlSessionFactory(dataSource)는 spring framework에 등록된 dataSource를 매개변수로 받아서, sqlSessionFactoryBean을 설정하고 그 객체를 spring framework에 등록한다.
#- sqlSessionFactoryBean에 매개변수로 받은 myBatis dataSource를 등록한다.
#- sqlSessionFactoryBean에 쿼리문이 저장된 xml(mapper)을 매핑하여 해당 쿼리를 활용할 수 있도록한다.
#
#- mapper 위치 : classpath:/mapper/**/**.xml
#
#- sqlSessionTemplate에 sqlSessionFactory를 등록하여 sqlSessionTemplate을 spring framework에 등록한다.


spring.mvc.static-path-pattern=/static/**
spring.resources.static-locations=classpath:/static/
spring.resources.add-mappings=true 

#jsp File ìì ì refresh setting
server.servlet.jsp.init-parameters.development=true